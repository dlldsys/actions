name: VLESS Server with SakuraFrp (VLESS+WS)

on:
  workflow_dispatch:
    inputs:
      port:
        description: 'VLESS 服务端监听端口'
        required: true
        default: '8080'
      uuid:
        description: 'VLESS UUID'
        required: true
        default: '2178250e-7cd3-404c-bcf4-02fe5f25d171'
      ws_path:
        description: 'WebSocket 路径'
        required: true
        default: '/ws'
      host:
        description: '伪装域名'
        required: true
        default: 'www.example.com'
      sakurafrp_token:
        description: 'SakuraFrp 认证令牌'
        required: true
        default: 'wadr25y8xv6h4ek361eoitlfsn7ow2nn'
      node_id:
        description: 'SakuraFrp 节点 ID'
        required: true
        default: '19089016'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up VLESS+WS Server
        env:
          PORT: ${{ github.event.inputs.port }}
          UUID: ${{ github.event.inputs.uuid }}
          WS_PATH: ${{ github.event.inputs.ws_path }}
          HOST: ${{ github.event.inputs.host }}
          SAKURAFRP_TOKEN: ${{ github.event.inputs.sakurafrp_token }}
          NODE_ID: ${{ github.event.inputs.node_id }}
        run: |
          # 安装必要的软件
          sudo apt-get update
          sudo apt-get install -y wget unzip jq

          # 下载并安装 Xray
          wget https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip
          unzip Xray-linux-64.zip -d xray
          sudo mv xray/xray /usr/local/bin/
          sudo chmod +x /usr/local/bin/xray

          # 创建 VLESS+WS 服务端配置文件
          cat > config.json << EOF
          {
            "log": {
              "loglevel": "warning"
            },
            "inbounds": [
              {
                "port": $PORT,
                "protocol": "vless",
                "settings": {
                  "clients": [
                    {
                      "id": "$UUID",
                      "level": 0
                    }
                  ],
                  "decryption": "none"
                },
                "streamSettings": {
                  "network": "ws",
                  "security": "none",
                  "wsSettings": {
                    "path": "$WS_PATH",
                    "headers": {
                      "Host": "$HOST"
                    }
                  }
                }
              }
            ],
            "outbounds": [
              {
                "protocol": "freedom",
                "settings": {}
              }
            ]
          }
          EOF
          
          # 调试：显示配置文件内容和大小
          echo "配置文件内容:"
          cat config.json
          echo "配置文件大小:"
          du -h config.json
          
          # 验证配置文件格式
          if ! jq . config.json >/dev/null 2>&1; then
            echo "配置文件格式错误!"
            exit 1
          fi

          # 启动 Xray（VLESS+WS 服务端）
          sudo xray run -c config.json &
          sleep 5  # 等待 Xray 启动
         
          # 下载并配置 SakuraFrp 客户端
          docker run \
          -d \
          --restart=on-failure:5 \
          --network=host \
          --pull=always \
          --name=sakura1 \
          natfrp.com/frpc \
          --disable_log_color \
          -f $SAKURAFRP_TOKEN:$NODE_ID &
          
          sleep 15  # 等待隧道启动，增加等待时间
          
          # 获取 SakuraFrp 分配的公网地址和端口
          # 使用 curl 和 jq 从 SakuraFrp API 获取隧道信息
          TUNNEL_INFO=$(curl -s "https://api.natfrp.com/api/tunnels/list?token=$SAKURAFRP_TOKEN" | jq -r ".data.tunnels[] | select(.id == $NODE_ID)")
          SERVER_DOMAIN=$(echo "$TUNNEL_INFO" | jq -r '.domain')
          SERVER_PORT=$(echo "$TUNNEL_INFO" | jq -r '.port')
          
          # 如果 API 获取失败，尝试从日志中提取
          if [ -z "$SERVER_DOMAIN" ] || [ "$SERVER_DOMAIN" == "null" ]; then
            echo "无法从 API 获取隧道信息，尝试从日志提取..."
            SERVER_DOMAIN=$(docker logs sakura1 2>&1 | grep -oP '隧道域名: \K[^ ]+')
            SERVER_PORT=$(docker logs sakura1 2>&1 | grep -oP '隧道端口: \K\d+')
          fi
          
          # 再次验证是否获取到有效信息
          if [ -z "$SERVER_DOMAIN" ] || [ -z "$SERVER_PORT" ]; then
            echo "警告: 无法获取 SakuraFrp 隧道信息!"
            echo "请手动检查 SakuraFrp 控制台获取连接信息"
            SERVER_DOMAIN="unknown"
            SERVER_PORT="unknown"
          fi
          
          # 输出服务信息
          echo "VLESS+WS 服务端已通过 SakuraFrp 暴露"
          echo "公网域名: $SERVER_DOMAIN"
          echo "公网端口: $SERVER_PORT"
          echo "UUID: $UUID"
          echo "WebSocket 路径: $WS_PATH"
          echo "伪装域名: $HOST"
          
          # 生成新的 VLESS+WS URL
          # 格式: vless://UUID@服务器地址:端口?encryption=none&security=none&type=ws&host=伪装域名&path=路径#备注
          ESCAPED_PATH=$(echo "$WS_PATH" | sed 's/\//%2F/g')
          VLESS_URL="vless://$UUID@$SERVER_DOMAIN:$SERVER_PORT?encryption=none&security=none&type=ws&host=$HOST&path=$ESCAPED_PATH#GitHub_Actions_VLESS+WS"
          echo "VLESS+WS URL: $VLESS_URL"
          
          # 保存配置信息
          cat > vless_config_info.txt << EOF
          VLESS+WS 服务端配置信息:
          地址: $SERVER_DOMAIN
          端口: $SERVER_PORT
          用户ID: $UUID
          加密: none
          传输协议: ws
          WebSocket 路径: $WS_PATH
          伪装域名: $HOST
          VLESS URL: $VLESS_URL
          EOF
          
          # 定期检查服务状态
          while true; do
            if ! pgrep xray > /dev/null; then
              echo "错误: Xray 服务已停止!"
              exit 1
            fi
            if ! docker ps -f name=sakura1 | grep -q sakura1; then
              echo "错误: SakuraFrp 客户端已停止!"
              exit 1
            fi
            sleep 300  # 每5分钟检查一次
          done
          
      - name: Upload server information
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vless-server-info
          path: vless_config_info.txt

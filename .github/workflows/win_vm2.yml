name: Win Server with xingkong

on:
  workflow_dispatch:
    inputs:
      sakurafrp_token:
        description: 'SakuraFrp 认证令牌'
        required: true
        default: 'wadr25y8xv6h4ek361eoitlfsn7ow2nn'  # 不要在这里填写实际令牌，保持为空让用户输入
      node_id:
        description: 'SakuraFrp 节点 ID'
        required: true
        default: '22919542'

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 启用 RDP 服务
        run: |
          # 启用远程桌面
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          # 显示 RDP 服务状态
          Get-Service TermService
      - name: 创建RDP用户并设置密码
        run: |
          # 创建新用户
          $username = "GithubRunnerUser"
          $password = "LDld123000"  # 请更改为强密码
          
          # 创建用户
          net user $username $password /add /y
          
          # 将用户添加到远程桌面用户组
          net localgroup "Remote Desktop Users" $username /add
          
          # 将用户添加到管理员组（可选）
          net localgroup administrators $username /add
          
          # 允许用户通过RDP登录
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          
          # 配置网络级别身份验证（可选）
          Set-ItemProperty 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
          
          Write-Host "已创建用户: $username"
          Write-Host "密码: $password"
        shell: pwsh

      - name: Enable WSL2 and install Ubuntu
        shell: pwsh
        run: |
          # 启用WSL功能
          Write-Host "=== 启用WSL功能 ==="
          dism.exe /online /enable-feature /featurename:Microsoft-Hyper-V /all /norestart
          dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
          dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
          
          # 下载并安装WSL2内核更新
          Write-Host "`n=== 安装WSL2内核 ==="
          $wslKernelUrl = "https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"
          Invoke-WebRequest -Uri $wslKernelUrl -OutFile "wsl_update_x64.msi" -UseBasicParsing
          msiexec /i wsl_update_x64.msi /quiet /norestart
          
          # 设置WSL2为默认版本
          wsl --set-default-version 2
          
          # 安装Ubuntu 22.04
          Write-Host "`n=== 安装Ubuntu 22.04 ==="
          wsl --install -d Ubuntu-22.04
          
          # 等待安装完成
          Start-Sleep -Seconds 60
          
          # 验证安装
          Write-Host "`n=== WSL分发版本 ==="
          wsl --list --verbose

      - name: Configure Ubuntu in WSL2
        shell: pwsh
        run: |
          # 设置默认用户为root（避免权限问题）
          wsl -d Ubuntu-22.04 -u root bash -c "echo 'root:root' | chpasswd"
          wsl -d Ubuntu-22.04 -u root bash -c "echo '[user]' > /etc/wsl.conf"
          wsl -d Ubuntu-22.04 -u root bash -c "echo 'default=root' >> /etc/wsl.conf"
          
          # 更新系统并安装必要工具
          Write-Host "`n=== 更新Ubuntu并安装依赖 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "apt-get update && apt-get upgrade -y"
          wsl -d Ubuntu-22.04 -u root bash -c "apt-get install -y curl wget apt-transport-https ca-certificates software-properties-common"

      - name: Install Docker in WSL2 Ubuntu
        shell: pwsh
        run: |
          # 在WSL2中安装Docker
          Write-Host "`n=== 在WSL2中安装Docker ==="
          wsl -d Ubuntu-22.04 -u root bash -c "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -"
          wsl -d Ubuntu-22.04 -u root bash -c "add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'"
          wsl -d Ubuntu-22.04 -u root bash -c "apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io"
          
          # 启动Docker服务
          wsl -d Ubuntu-22.04 -u root bash -c "service docker start"
          
          # 验证Docker安装
          Write-Host "`n=== Docker版本信息 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker --version"
          wsl -d Ubuntu-22.04 -u root bash -c "docker info"

      - name: Run Docker commands in WSL2
        shell: pwsh
        run: |
          # 在WSL2中拉取并运行Linux容器
          Write-Host "`n=== 拉取Ubuntu镜像 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker pull ubuntu:22.04"
          
          Write-Host "`n=== 运行Docker容器 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker run --name test-container -d ubuntu:22.04 sleep 300"
          
          Write-Host "`n=== 查看运行中的容器 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker ps"
          
          Write-Host "`n=== 容器日志 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker logs test-container"

      - name: Build and run custom Docker image in WSL2
        shell: pwsh
        run: |
          Write-Host "`n=== 运行自定义镜像 ==="
          wsl -d Ubuntu-22.04 -u root bash -c "docker run -d --net=host --name stars.client registry.cn-beijing.aliyuncs.com/ld_beijing/stars.client:5.1.9"

          
          
      - name: 下载并配置 SakuraFrp 客户端
        env:
          SAKURAFRP_TOKEN: ${{ github.event.inputs.sakurafrp_token }}
          NODE_ID: ${{ github.event.inputs.node_id }}
        run: |
          # 下载 Windows 版 frp 客户端
          Invoke-WebRequest -Uri "https://nya.globalslb.net/natfrp/client/frpc/0.51.0-sakura-12.3/frpc_windows_amd64.exe" -OutFile "frpc.exe"
          .\frpc.exe -f wadr25y8xv6h4ek361eoitlfsn7ow2nn:22904011
          
          # 等待启动并显示日志
          Start-Sleep -Seconds 10
          Get-Content -Path "frpc.log" -ErrorAction SilentlyContinue

      - name: 保持工作流运行
        run: |
          Write-Host "RDP 服务已启用，frp 客户端已启动"
          Write-Host "工作流将持续运行 300 分钟"
          
          # 每30秒检查一次frp进程状态
          $endTime = (Get-Date).AddMinutes(300)
          while ((Get-Date) -lt $endTime) {
            $frpProcess = Get-Process "frpc" -ErrorAction SilentlyContinue
            if (-not $frpProcess) {
              Write-Error "frp 客户端已停止，重新启动..."
              Start-Process -FilePath "start_frp.bat" -NoNewWindow
            }
            Start-Sleep -Seconds 30
          }
